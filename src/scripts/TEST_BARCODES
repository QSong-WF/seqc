#!/usr/local/bin/python3

__author__ = 'ambrose'

"""
Test whether provided barcodes are reverse complemented, or if the library is not stranded
and contains both barcodes. Important pre-processing check for PROCESS_BARCODES.
"""

# todo | check here for poly-A vs poly-T as well; although this is easier to do from
# todo | inspection

import argparse
from sys import argv, exit
from seqc import barcodes


def parse_args():
    p = argparse.ArgumentParser()
    i = p.add_argument_group()
    i.add_argument('-f', '--barcoded-fastq', metavar='F',
                   help='fastq file containing barcodes', default=None)
    i.add_argument('-m', '--merged-fastq', metavar='M', default=None,
                   help='merged fastq file with barcodes in header')

    p.add_argument('-b', '--barcode_files', metavar='B', help='barcode files', nargs='+')
    p.add_argument('-p', '--processor', metavar='P',
                   help='type of experiment barcodes will be used in',
                   choices=['in-drop', 'drop-seq', 'mars-seq', 'cel-seq', 'avo-seq'])

    if len(argv) == 1:
        p.print_help()
        exit(2)

    arguments = p.parse_args()
    if not any([arguments.merged_fastq, arguments.barcode_files]):
        print('PROCESS_BARCODES: error: one or more of the following arguments must '
              'be provided: -m/--merged-fastq, -f/--barcoded-fastq')
        exit(2)

    return arguments


def main(fastq, merged_fastq, barcode_files, processor):

    # load barcodes
    normal = barcodes.load_barcodes(barcode_files, reverse_complement=False)
    revcomp = barcodes.load_barcodes(barcode_files, reverse_complement=True)

    # load processor
    tbp = barcodes.three_bit.ThreeBit.default_processors(processor)
    normal = barcodes.codes2bin(normal, tbp)
    revcomp = barcodes.codes2bin(revcomp, tbp)

    # load first 2500 alignments
    nnorm = 0
    nrevs = 0
    i = 0
    if fastq:
        with open(fastq, 'r') as f:
            records = []
            while i < 10000:
                records.append(f.readline())
                i += 1
        for r in records[1::4]:
            cell, _, _ = tbp.process_forward_sequence(r[:-1])  # dump newline
            if cell in normal:
                nnorm += 1
            if cell in revcomp:
                nrevs += 1
    else:
        with open(merged_fastq, 'r') as f:
            records = []
            while i < 10000:
                records.append(f.readline())
                i += 1
        for r in records[0::4]:
            cell = int(r.strip('@\n').split(':')[0])  # first meta field in name
            if cell in normal:
                nnorm += 1
            if cell in revcomp:
                nrevs += 1
    print('Cell barcodes identified:\nSense: %d\nReverse Complemented: %d\n' %
          (nnorm, nrevs))


if __name__ == "__main__":
    args = parse_args()
    main(args.barcoded_fastq, args.merged_fastq, args.barcode_files, args.processor)